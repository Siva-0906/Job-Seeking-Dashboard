import React, { createContext, useContext, useState, useEffect } from 'react';
import { User, UserRole } from '../types';
import { allUsers } from '../data/mock';

interface AuthContextType {
  user: User | null;
  isAuthenticated: boolean;
  isLoading: boolean;
  login: (email: string, password: string) => Promise<boolean>;
  register: (email: string, name: string, password: string, role: UserRole) => Promise<boolean>;
  logout: () => void;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(true);

  useEffect(() => {
    // Check for existing session on load
    const storedUser = localStorage.getItem('jobBoardUser');
    if (storedUser) {
      setUser(JSON.parse(storedUser));
    }
    setIsLoading(false);
  }, []);

  const login = async (email: string, password: string): Promise<boolean> => {
    // In a real app, this would be an API call
    // For demo purposes, we'll use mock data
    setIsLoading(true);
    
    return new Promise((resolve) => {
      // Simulate API delay
      setTimeout(() => {
        const foundUser = allUsers.find(u => u.email.toLowerCase() === email.toLowerCase());
        if (foundUser) {
          setUser(foundUser);
          localStorage.setItem('jobBoardUser', JSON.stringify(foundUser));
          setIsLoading(false);
          resolve(true);
        } else {
          setIsLoading(false);
          resolve(false);
        }
      }, 800);
    });
  };

  const register = async (
    email: string, 
    name: string, 
    password: string, 
    role: UserRole
  ): Promise<boolean> => {
    // In a real app, this would be an API call to create a new user
    setIsLoading(true);
    
    return new Promise((resolve) => {
      // Simulate API delay
      setTimeout(() => {
        // Check if email is already in use
        const existingUser = allUsers.find(u => u.email.toLowerCase() === email.toLowerCase());
        if (existingUser) {
          setIsLoading(false);
          resolve(false);
          return;
        }
        
        // Create new user
        const newUser: User = {
          id: `temp-${Date.now()}`, // In a real app, this would be generated by the backend
          name,
          email,
          role,
          createdAt: new Date()
        };
        
        setUser(newUser);
        localStorage.setItem('jobBoardUser', JSON.stringify(newUser));
        setIsLoading(false);
        resolve(true);
      }, 800);
    });
  };

  const logout = () => {
    setUser(null);
    localStorage.removeItem('jobBoardUser');
  };

  return (
    <AuthContext.Provider
      value={{
        user,
        isAuthenticated: !!user,
        isLoading,
        login,
        register,
        logout
      }}
    >
      {children}
    </AuthContext.Provider>
  );
};